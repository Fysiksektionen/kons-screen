From b2485ab61e183a99e1b13fc1fea6dc862c656625 Mon Sep 17 00:00:00 2001
From: Petros Angelatos <petrosagg@gmail.com>
Date: Sun, 20 May 2018 22:54:59 -0700
Subject: [PATCH] platform: make gstreamer audio sink configurable

On the RaspberryPi autoaudiosink will always select omxhdmiaudiosink if
an HDMI cable is connected but some users might want to output the audio
on the 3.5mm Jack or some other alsa sound card.

Introduce the WPE_GSTREAMER_AUDIO_SINK environment variable that can
override the default audio sink.

Signed-off-by: Petros Angelatos <petrosagg@gmail.com>
---
 .../audio/gstreamer/AudioDestinationGStreamer.cpp      | 10 +++++++---
 .../audio/gstreamer/AudioSourceProviderGStreamer.cpp   |  7 ++++++-
 .../graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp |  8 ++++++--
 3 files changed, 19 insertions(+), 6 deletions(-)

diff --git a/Source/WebCore/platform/audio/gstreamer/AudioDestinationGStreamer.cpp b/Source/WebCore/platform/audio/gstreamer/AudioDestinationGStreamer.cpp
index 5bf8fda6b29..3b11744b276 100644
--- a/Source/WebCore/platform/audio/gstreamer/AudioDestinationGStreamer.cpp
+++ b/Source/WebCore/platform/audio/gstreamer/AudioDestinationGStreamer.cpp
@@ -95,10 +95,14 @@ AudioDestinationGStreamer::AudioDestinationGStreamer(AudioIOCallback& callback,
                                                                             "provider", &m_callback,
                                                                             "frames", framesToPull, nullptr));
 
-    GRefPtr<GstElement> audioSink = gst_element_factory_make("autoaudiosink", nullptr);
+    const char* audioSinkName = getenv("WPE_GSTREAMER_AUDIO_SINK");
+    if (!audioSinkName) {
+        audioSinkName = "autoaudiosink";
+    }
+    GRefPtr<GstElement> audioSink = gst_element_factory_make(audioSinkName, nullptr);
     m_audioSinkAvailable = audioSink;
     if (!audioSink) {
-        LOG_ERROR("Failed to create GStreamer autoaudiosink element");
+        LOG_ERROR("Failed to create GStreamer %s element", audioSinkName);
         return;
     }
 
@@ -109,7 +113,7 @@ AudioDestinationGStreamer::AudioDestinationGStreamer(AudioIOCallback& callback,
     // audiosink was loaded correctly.
     GstStateChangeReturn stateChangeReturn = gst_element_set_state(audioSink.get(), GST_STATE_READY);
     if (stateChangeReturn == GST_STATE_CHANGE_FAILURE) {
-        LOG_ERROR("Failed to change autoaudiosink element state");
+        LOG_ERROR("Failed to change %s element state", audioSinkName);
         gst_element_set_state(audioSink.get(), GST_STATE_NULL);
         m_audioSinkAvailable = false;
         return;
diff --git a/Source/WebCore/platform/audio/gstreamer/AudioSourceProviderGStreamer.cpp b/Source/WebCore/platform/audio/gstreamer/AudioSourceProviderGStreamer.cpp
index 01882e1edf9..3b39c3668f9 100644
--- a/Source/WebCore/platform/audio/gstreamer/AudioSourceProviderGStreamer.cpp
+++ b/Source/WebCore/platform/audio/gstreamer/AudioSourceProviderGStreamer.cpp
@@ -116,6 +116,11 @@ void AudioSourceProviderGStreamer::configureAudioBin(GstElement* audioBin, GstEl
 {
     m_audioSinkBin = audioBin;
 
+    const char* audioSinkName = getenv("WPE_GSTREAMER_AUDIO_SINK");
+    if (!audioSinkName) {
+        audioSinkName = "autoaudiosink";
+    }
+
     GstElement* audioTee = gst_element_factory_make("tee", "audioTee");
     GstElement* audioQueue = gst_element_factory_make("queue", nullptr);
     GstElement* audioConvert = gst_element_factory_make("audioconvert", nullptr);
@@ -123,7 +128,7 @@ void AudioSourceProviderGStreamer::configureAudioBin(GstElement* audioBin, GstEl
     GstElement* audioResample = gst_element_factory_make("audioresample", nullptr);
     GstElement* audioResample2 = gst_element_factory_make("audioresample", nullptr);
     GstElement* volumeElement = gst_element_factory_make("volume", "volume");
-    GstElement* audioSink = gst_element_factory_make("autoaudiosink", nullptr);
+    GstElement* audioSink = gst_element_factory_make(audioSinkName, nullptr);
 
     gst_bin_add_many(GST_BIN(m_audioSinkBin.get()), audioTee, audioQueue, audioConvert, audioResample, volumeElement, audioConvert2, audioResample2, audioSink, nullptr);
 
diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
index 2994862b63b..187b52148f8 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
@@ -2250,9 +2250,13 @@ void MediaPlayerPrivateGStreamer::setPreload(MediaPlayer::Preload preload)
 
 GstElement* MediaPlayerPrivateGStreamer::createAudioSink()
 {
-    m_autoAudioSink = gst_element_factory_make("autoaudiosink", nullptr);
+    const char* audioSinkName = getenv("WPE_GSTREAMER_AUDIO_SINK");
+    if (!audioSinkName) {
+        audioSinkName = "autoaudiosink";
+    }
+    m_autoAudioSink = gst_element_factory_make(audioSinkName, nullptr);
     if (!m_autoAudioSink) {
-        GST_WARNING("GStreamer's autoaudiosink not found. Please check your gst-plugins-good installation");
+        GST_WARNING("GStreamer's %s not found. Please check your plugins installation", audioSinkName);
         return nullptr;
     }
 
-- 
2.17.0

